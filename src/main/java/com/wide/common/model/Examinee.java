package com.wide.common.model;

import java.util.ArrayList;
import java.util.List;

import com.jfinal.kit.StrKit;
import com.jfinal.plugin.activerecord.Db;
import com.wide.common.model.base.BaseExaminee;
import com.wide.common.model.query.QueryExam;
import com.wide.common.model.query.QueryExaminee;
import com.wide.common.model.query.QueryStatistics;
import com.wide.util.DateUtil;
import com.wide.util.TypeChecker;
import com.wide.viewmodel.DataTablesModel;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class Examinee extends BaseExaminee<Examinee> {
	public static final Examinee dao = new Examinee();

	public DataTablesModel pageDataTables(int pageNum, int pageSize, QueryExaminee queryExaminee, int flag) {
		// TODO Auto-generated method stub
		 String select = "";
		 StringBuilder sqlExceptSelect = new StringBuilder("");
		 if(flag==2){
			 select = "select t1.id,t.code,t.name,t.starttime,t.endtime,t1.examineename,t1.totalscore,t1.status,t1.isfinishjudge,t1.exam_id ";
			 sqlExceptSelect.append((" from sys_exam t, sys_examinee t1 "));
			 sqlExceptSelect.append(whereQuery(queryExaminee,flag));
			 sqlExceptSelect.append(orderbyQuery(queryExaminee,flag));
		 }else{
			 select = "select t.id,t.seatno,t.examineename,t1.cardno,t.fingerprint,t.sculpturepath,t.status";
			 sqlExceptSelect.append((" from sys_examinee t ,sys_user t1"));
			 sqlExceptSelect.append(whereQuery(queryExaminee,flag));
			 sqlExceptSelect.append(orderbyQuery(queryExaminee,flag));
		 } 
		 return this.paginateDataTables(pageNum, pageSize, select, sqlExceptSelect.toString());
		}
		/**
		 * query where查询
		 * 
		 * */
		private String whereQuery(QueryExaminee queryExaminee,int flag){
			String where="";
			if(flag==2){
				where = where+" where 1=1  and t.isdel = 0 and t.isenable = 1 and t.id = t1.exam_id ";
				if(!TypeChecker.isEmpty(queryExaminee.getExamId())){
					where += " and t.id = '"+queryExaminee.getExamId()+"'";
				}
				if(!TypeChecker.isEmpty(queryExaminee.getExamineeId())){
					where += " and t1.id = '"+queryExaminee.getExamineeId()+"'";
				}
				if(!TypeChecker.isEmpty(queryExaminee.getStarttime())){
					where += " and t.starttime > '"+queryExaminee.getStarttime()+"'";
				}
				if(!TypeChecker.isEmpty(queryExaminee.getEndtime())){
					where += " and t.endtime < '"+queryExaminee.getEndtime()+"'";
				}
			}else{
				where = where+" where 1=1  and t.isdel = 0 and t.isenable = 1 and t.user_id = t1.id ";
				if(queryExaminee.getExamId()!=null&&!queryExaminee.getExamId().equals("")){
					where += " and t.exam_id = '"+queryExaminee.getExamId()+"'";
				}
				if(queryExaminee.getExampapers_id()!=null&&!queryExaminee.getExampapers_id().equals("")){
					where += " and t.exampapers_id = '"+queryExaminee.getExampapers_id()+"'";
				}
				if(queryExaminee.getName()!=null&&!queryExaminee.getName().equals("")){
					where += " and t.examineename like '%"+queryExaminee.getName()+"%'";
				}
				if(queryExaminee.getExamineeId()!=null&&!queryExaminee.getExamineeId().equals("")){
					where += " and t.id ='"+queryExaminee.getExamineeId()+"'";
				}
			}
			return where;
			
		}
		/**
		 * query order by 
		 * 
		 * */
		private String orderbyQuery(QueryExaminee queryExaminee,int flag){
			String orderby  = "";
			if(flag==2){
				orderby = " order by t.create_date desc ";
			}else{
				orderby = " order by t.seatno, t.create_date desc ";
			}
			return orderby;
			
		}
		
		/**
		 * 通过exam_id查询考生列表
		 * @param examId
		 * @return
		 */
		public List<Examinee> getExamineeByExamId(String examId){
			List<Examinee> list = find("select t.* from sys_examinee t where t.isenable = 1 and t.exam_id = ?",examId);
			return list;
		}
		
		/**
		 * 通过exam_id查询考生列表
		 * @param examId
		 * @return
		 */
		public List<Examinee> getExamineeByExamIdType(String examId,int type){
			List<Examinee> list = find("select t.* from sys_examinee t where t.isenable = 1 and t.exam_id = ? and t.scoreslevel = ?",examId,type);
			return list;
		}
		public List<Examinee> getDapartmentExamineeByType(String officeid,int type,String whereStr) {
			// TODO Auto-generated method stub
			List<Examinee> list = find("select DISTINCT t.* from  sys_examinee t ,sys_user t1, sys_office_user t2 , sys_exam t3 where t.user_id = t1.id "
					+ "and t1.id =t2.user_id and t.exam_id = t3.id and t.scoreslevel=? and t2.office_id = ? "+whereStr,type,officeid);
			return list;
		}
		//人员成绩统计
		public DataTablesModel getPageExamcjCountfind(int pageNum, int pageSize, QueryStatistics queryStatistics) {
			// TODO Auto-generated method stub
			final List<Object> parameters = new ArrayList<Object>();
			String select = "SELECT DISTINCT t2.name AS exam_id ,t1.examineename , COUNT(*) AS status, t1.user_id ";
			StringBuilder sqlExceptSelect = new StringBuilder(" FROM  sys_exam t ,sys_examinee t1,sys_office t2,sys_office_user t3 ");
			sqlExceptSelect.append(whereQueryExamCountfind(queryStatistics));
			return this.paginateDataTables(pageNum, pageSize, select.toString(), sqlExceptSelect.toString());
		}
		//人员统计
		public DataTablesModel getPageExamCountfind(int pageNum, int pageSize, QueryStatistics queryStatistics) {
			// TODO Auto-generated method stub
			final List<Object> parameters = new ArrayList<Object>();
			String select = "SELECT DISTINCT t2.name AS exam_id ,t1.examineename , COUNT(*) AS status, (SUM(t1.scoreslevel = 0) ) AS fingerprint "
					+ ", (SUM(t1.scoreslevel = 1)) AS ticketcode , (SUM(t1.scoreslevel = 2)) AS macaddress ";
			StringBuilder sqlExceptSelect = new StringBuilder(" FROM  sys_exam t ,sys_examinee t1,sys_office t2,sys_office_user t3 ");
			sqlExceptSelect.append(whereQueryExamCountfind(queryStatistics));
			return this.paginateDataTables(pageNum, pageSize, select.toString(), sqlExceptSelect.toString());
		}
		
		public List<Object[]> exportPageExamCountfind(int pageNum, int pageSize, QueryStatistics queryStatistics){
			String select = "SELECT DISTINCT t2.name AS exam_id ,t1.examineename , COUNT(*) AS status, (SUM(t1.scoreslevel = 0) ) AS fingerprint "
					+ ", (SUM(t1.scoreslevel = 1)) AS ticketcode , (SUM(t1.scoreslevel = 2)) AS macaddress FROM sys_exam t ,sys_examinee t1,sys_office t2,sys_office_user t3 "+whereQueryExamCountfind(queryStatistics);
			List<Object[]> list = new ArrayList<Object[]>();
			list = Db.query(select);
			return list;
		}
		private String whereQueryExamCountfind(QueryStatistics queryStatistics) {
			// TODO Auto-generated method stub
			String whereStr = "WHERE t1.isdel = 0 AND t1.isenable = 1 AND t.id = t1.exam_id AND t1.user_id=t3.user_id AND t2.id = t3.office_id ";
			if(!StrKit.isBlank(queryStatistics.getStarttime())){
				whereStr += " and t.starttime > '"+queryStatistics.getStarttime()+" 00:00:00'";
			}
			if(!StrKit.isBlank(queryStatistics.getEndtime())){
				whereStr += " and t.endtime < '"+queryStatistics.getEndtime()+" 23:59:59'";
			}
			if(!StrKit.isBlank(queryStatistics.getExamid())){
				whereStr += " and t.id = '"+queryStatistics.getExamid()+"'";
			}
			whereStr += " GROUP BY t2.name,t1.examineename ";
			return whereStr;
		}
		
	}
